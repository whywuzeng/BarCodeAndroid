      /**
         * This method produces very useful error messages. If present, an input
         * source map will be used to get the original position of the source, even
         * from a previous compilation step (e.g., from Sass compilation).
         * @returns The original position of the node in the source, showing line
         * and column numbers and also a small excerpt to facilitate debugging.
         */
        error(
            /**
             * Error description.
             */
            message: string, options?: NodeErrorOptions): CssSyntaxError;
        /**
         * Creates an instance of Warning and adds it to messages. This method is
         * provided as a convenience wrapper for Result#warn.
         * Note that `opts.node` is automatically passed to Result#warn for you.
         * @param result The result that will receive the warning.
         * @param text Warning message. It will be used in the `text` property of
         * the message object.
         * @param opts Properties to assign to the message object.
         */
        warn(result: Result, text: string, opts?: WarningOptions): void;
        /**
         * @returns The next child of the node's parent; or, returns undefined if
         * the current node is the last child.
         */
        next(): Node;
        /**
         * @returns The previous child of the node's parent; or, returns undefined
         * if the current node is the first child.
         */
        prev(): Node;
        /**
         * @returns The Root instance of the node's tree.
         */
        root(): Root;
        /**
         * Removes the node from its parent and cleans the parent property in the
         * node and its children.
         * @returns This node for chaining.
         */
        remove(): this;
        /**
         * Inserts node(s) before the current node and removes the current node.
         * @returns This node for chaining.
         */
        replaceWith(...nodes: (Node | Object)[]): this;
        /**
         * @param overrides New properties to override in the clone.
         * @returns A clone of this node. The node and its (cloned) children will
         * have a clean parent and code style properties.
         */
        clone(overrides?: Object): this;
        /**
         * Shortcut to clone the node and insert the resulting cloned node before
         * the current node.
         * @param overrides New Properties to override in the clone.
         * @returns The cloned node.
         */
        cloneBefore(overrides?: Object): this;
        /**
         * Shortcut to clone the node and insert the resulting cloned node after
         * the current node.
         * @param overrides New Properties to override in the clone.
         * @returns The cloned node.
        